---
title: Selecting and Configuring a Monitoring System
owner: Cloud Ops
---

This topic describes considerations for selecting and configuring a system to continuously monitor <%= vars.platform_name %> component performance and health.


## <a id='select'></a> Selecting a Monitoring Platform

<%= vars.recommended_by %> recommends using [<%= vars.platform_name %> Healthwatch](https://docs.pivotal.io/pcf-healthwatch/index.html) to monitor your deployment. <%= vars.platform_name %> Healthwatch is a service tile developed and supported by Pivotal and available on [Pivotal Network](https://network.pivotal.io/products/p-healthwatch).

Many third-party systems can also be used to monitor a <%= vars.platform_name %> deployment.

### <a id='types'></a> Monitoring Platform Types

Monitoring platforms support two types of monitoring:

* A _dashboard_ for active monitoring when you are at a keyboard and screen
* Automated _alerts_ for when your attention is elsewhere

Some monitoring solutions offer both in one package. Others require putting the two pieces together.

### <a id='platforms'></a> Monitoring Platforms

There are many monitoring options available, both open source and commercial products. Some commonly-used platforms among <%= vars.platform_name %> customers include:

* [<%= vars.platform_name %> Healthwatch](https://docs.pivotal.io/pcf-healthwatch/index.html) by Pivotal

* <%= vars.platform_name %> Partner Services available on [Pivotal Network](https://network.pivotal.io):
  - [AppDynamics](https://docs.pivotal.io/partners/appdynamics/old_index.html)
  - [Datadog](https://docs.pivotal.io/partners/datadog/release-notes.html)
  - [Dynatrace](https://docs.pivotal.io/partners/dynatrace-fullstack-addon/release-notes.html)
  - [New Relic](http://docs.pivotal.io/partners/newrelic/release-notes.html)
  - [WaveFront by VMware](http://docs.pivotal.io/partners/wavefront-nozzle/)

* Other Commercial Services
  - [VMware vRealize Operations (vROPS)](http://www.vmware.com/products/vrealize-operations.html)

* Open-Source Tooling
  - [Prometheus + Grafana](https://github.com/bosh-prometheus/prometheus-boshrelease)
  - [OpenTSDB](http://opentsdb.net)

### <a id='cloud-ops'></a> Pivotal Cloud Ops Tools

The Pivotal Cloud Ops Team manages two types of deployments for internal Pivotal use: open-source Cloud Foundry, and <%= vars.platform_name %>.

For **Cloud Foundry**, Pivotal Cloud Ops uses several monitoring tools. The [Datadog Config repository](https://github.com/pivotal-cf-experimental/datadog-config-oss) provides an example of how the Pivotal Cloud Ops team uses a customized Datadog dashboard to monitor the health of its open-source Cloud Foundry deployments.

To monitor its **<%= vars.platform_name %>** deployments, Pivotal Cloud Ops leverages a combination of [<%= vars.platform_name %> Healthwatch](https://docs.pivotal.io/pcf-healthwatch/1-2/index.html) and [Google Stackdriver](https://cloud.google.com/stackdriver/).


## <a id='cloud-ops'></a> Key Inputs for Platform Monitoring

### <a id='component-metrics'></a> BOSH VM and <%= vars.platform_name %> Component Health Metrics

Most monitoring service tiles for <%= vars.platform_name %> come packaged with the Firehose nozzle necessary to extract the BOSH and <%= vars.platform_name %> metrics leveraged for platform monitoring. Nozzles are programs that consume data from the Loggregator Firehose. Nozzles can be configured to select, buffer, and transform data, and to forward it to other apps and services.

The nozzles gather the component logs and metrics streaming from the Loggregator Firehose endpoint. For more information about the Firehose, see [Loggregator Architecture](https://docs.pivotal.io/platform/loggregator/architecture.html).

As of <%= vars.platform_name %> v2.0, both BOSH VM Health metrics and <%= vars.platform_name %> component metrics stream through the Firehose by default.

* <%= vars.platform_name %> component metrics originate from the Metron agents on their source components, then travel through Dopplers to the Traffic Controller.

* The Traffic Controller aggregates both metrics and log messages system-wide from all Dopplers, and emits them from its Firehose endpoint.

For information about high-signal-value metrics and capacity scaling indicators in a <%= vars.platform_name %> deployment, see [Key Performance Indicators](https://docs.pivotal.io/platform/monitoring/kpi.html) and [Key Capacity Scaling Indicators](https://docs.pivotal.io/platform/monitoring/key-cap-scaling.html).

### <a id='smoke-tests'></a> Continuous Functional Smoke Tests

<%= vars.platform_name %> includes smoke tests, which are functional unit and integration tests on all major system components. By default, whenever an operator upgrades to a new version of <%= vars.app_runtime_full %> (<%= vars.app_runtime_abbr %>), these smoke tests run as a post-deploy errand.

<%= vars.recommended_by %> recommends additional higher-resolution monitoring by the execution of continuous smoke tests, or Service Level Indicator tests, that measure user-defined features and check them against expected levels.

* [<%= vars.platform_name %> Healthwatch](https://network.pivotal.io/products/p-healthwatch) automatically executes these tests for <%= vars.app_runtime_abbr %> Service Level Indicators.

* The Pivotal Cloud Ops [CF Smoke Tests](https://github.com/pivotal-cloudops/cf-smoke-tests/tree/Dockerfile) repository offers additional testing examples.

For information about how to set up Concourse to generate custom component metrics, see [Metrics](https://concourse-ci.org/metrics.html) in the Concourse documentation.


## <a id="thresholds"></a> Warning and Critical Thresholds

To properly configure your monitoring dashboard and alerts, you must establish what thresholds should drive alerting and red/yellow/green dashboard behavior.

Some key metrics have more fixed thresholds, with similar threshold numbers numbers recommended across different foundations and use cases. These metrics tend to revolve around the health and performance of key components that can impact the performance of the entire system.

Other metrics of operational value are more dynamic in nature. This means that you must establish a baseline and yellow/red thresholds suitable for your system and its use cases. You can establish initial baselines by watching values of key metrics over time and noting what seems to be a good starting threshold level that divides acceptable and unacceptable system performance and health.

### <a id='continuous'></a> Continuous Evolution

Effective platform monitoring requires continuous evolution.

After you establish initial baselines, <%= vars.recommended_by %> recommends that you continue to refine your metrics and tests to maintain the appropriate balance between early detection and reducing unnecessary alert fatigue. You should occasionally revisit the dynamic measures recommended in [Key Performance Indicators](https://docs.pivotal.io/platform/monitoring/kpi.html) and [Key Capacity Scaling Indicators](https://docs.pivotal.io/platform/monitoring/key-cap-scaling.html) to ensure they are still appropriate to the current system configuration and its usage patterns.
