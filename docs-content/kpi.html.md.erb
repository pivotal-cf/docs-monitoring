---
title: Key Performance Indicators 
owner: PCF Metrics Platform Monitoring
---

This topic describes Key Performance Indicators (KPIs) that operators may want to monitor with their Pivotal Cloud Foundry (PCF) deployment to help ensure it is in a good operational state.

The following PCF v2.1 KPIs are provided for operators to give general guidance on monitoring a PCF deployment using platform component and system (BOSH) metrics. 
Although many metrics are emitted from the platform, the following PCF v2.1 KPIs are 
high-signal-value metrics that can indicate emerging platform issues. 

This alerting and response guidance has been shown to apply to most deployments. 
Pivotal recommends that operators continue to fine-tune the alert measures to their deployment 
by observing historical trends. 
Pivotal also recommends that operators expand beyond this guidance and create new, deployment-specific monitoring
metrics, thresholds, and alerts based on learning from their deployments.

<p class="note"><strong>Note</strong>: Thresholds noted as "dynamic" in the tables below indicate that while a metric is highly important to watch, the relative numbers to set threshold warnings at are specific to a given PCF environment and its use cases. These dynamic thresholds should be occasionally revisited because the PCF foundation and its usage continue to evolve. See <a href="metrics.html#thresholds">Determine Warning and Critical Thresholds</a> for more information.</p>

## <a id="auctioneer"></a> Diego Auctioneer Metrics
 
###<a id="AuctioneerLRPAuctionsFailed"></a>Auctioneer App Instance (AI) Placement Failures

<table>
   <tr><th colspan="2" style="text-align: center;"><br> auctioneer.AuctioneerLRPAuctionsFailed<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>The number of Long Running Process (LRP) instances that the auctioneer failed to place on Diego cells. This metric is cumulative over the lifetime of the auctioneer job.<br><br>
   
      <strong>Use</strong>: This metric can indicate that PCF is out of container space or that there is a lack of resources within your environment. This indicator also increases when the LRP is requesting an isolation segment, volume drivers, or a stack that is unavailable, either not deployed or lacking sufficient resources to accept the work. 
  <br><br> 
      This error is most common due to capacity issues, for example, if cells do not have 
      enough resources, or if cells are going back and forth between a healthy and unhealthy state.
      <br><br>
      <strong>Origin</strong>: Firehose<br>
      <strong>Type</strong>: Counter (Integer)<br>
      <strong>Frequency</strong>: During each auction<br>
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Per minute delta averaged over a 5-minute window</td>
   </tr>
   <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: &ge; 0.5<br>
      <strong>Red critical</strong>: &ge; 1</td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>
         <ol>
	    <li>To best determine the root cause, examine the Auctioneer logs. Depending on the specific error and resource constraint, you may also find a failure reason in the Cloud Controller (CC) API.</li> 
            <li>Investigate the health of your Diego cells to determine if they
            are the resource type causing the problem.</li> 
            <li>Consider scaling additional cells using Ops Manager.</li>
            <li>If scaling cells does not solve the problem, pull Diego brain logs and BBS node logs
             and contact Pivotal Support telling them that LRP auctions are failing.</li>
         </ol>
      </td>
   </tr>
</table>


###<a id="AuctioneerFetchStatesDuration"></a>Auctioneer Time to Fetch Cell State

<table>
   <tr><th colspan="2" style="text-align: center;"><br>auctioneer.AuctioneerFetchStatesDuration<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td> Time in ns that the auctioneer took to fetch state from all the Diego cells when running its auction.<br><br>

      <strong>Use</strong>: Indicates how the cells themselves are performing. 
      Alerting on this metric helps alert that app staging requests to Diego may be failing.

      <br><br>
      <strong>Origin</strong>: Firehose<br>
      <strong>Type</strong>: Gauge, integer in ns<br>
      <strong>Frequency</strong>: During event, during each auction<br>
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td> Maximum over the last 5 minutes divided by 1,000,000,000</td>
   </tr>
   <tr>
         <th>Recommended alert thresholds</th>
         <td><strong>Yellow warning</strong>: &ge; 2 s<br>
         <strong>Red critical</strong>: &ge; 5 s</td>
   </tr>
   <tr>
      <th>Recommended response</th>
        <td>
          <ol>
             <li>Check the health of the cells by reviewing the logs and looking for errors.</li>
             <li>Review IaaS console metrics.</li>
             <li>Pull Diego brain logs and cell logs and contact Pivotal Support telling them that fetching cell states is taking too long.</li>
          </ol>
       </td>
   </tr>
</table>

###<a id="AuctioneerLRPAuctionsStarted"></a>Auctioneer App Instance Starts
<table> 
   <tr><th colspan="2" style="text-align: center;"><br>auctioneer.AuctioneerLRPAuctionsStarted<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>The number of LRP instances that the auctioneer successfully placed on Diego cells. This metric is cumulative over the lifetime of the auctioneer job. 
                        <br><br>
                <strong>Use</strong>: Provides a sense of running system activity levels in your environment. 
                Can also give you a sense of how many app instances have been started over time.
                The recommended measurement, below, can help indicate a significant amount of container churn. 
                However, for capacity planning purposes, it is more helpful to observe deltas over a long time window. 
                 <br><br>
                 <strong>Origin</strong>: Firehose<br>
                 <strong>Type</strong>: Counter (Integer)<br>
                 <strong>Frequency</strong>: During event, during each auction<br>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>Per minute delta averaged over a 5-minute window</td>
</tr>
<tr>
<th>Recommended alert thresholds</th>
<td><strong>Yellow warning</strong>: Dynamic<br>
<strong>Red critical</strong>: Dynamic</td>
</tr>
<tr>
<th>Recommended response</th>
<td>
When observing a significant amount of container churn, do the following:<br><br>
    <ol>
    <li>Look to eliminate explainable causes of temporary churn, such as a deployment or increased developer activity.</li>
    <li>If container churn appears to continue over an extended period, pull logs from the Diego Brain and BBS node before contacting Pivotal support.</li>
    </ol>	    
When observing extended periods of high or low activity trends, scale up or down CF components as needed.

    </td>
</tr>
</table>

###<a id="AuctioneerTaskAuctionsFailed"></a> Auctioneer Task Placement Failures
<table>
     <tr><th colspan="2" style="text-align: center;"><br>auctioneer.AuctioneerTaskAuctionsFailed<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>The number of Tasks that the auctioneer failed to place on Diego cells. This metric is cumulative over the lifetime of the auctioneer job. 
                        <br><br>
                <strong>Use</strong>: Failing Task auctions indicate a lack of resources 
                        within your environment and that you likely need to scale. 
                        This indicator also increases when the Task is requesting an isolation segment, volume drivers, 
                        or a stack that is unavailable, either not deployed or lacking sufficient resources to accept the work.
                <br><br>
			This error is most common due to capacity issues, for example, if cells do not have enough resources, or if cells are going back and forth between a healthy and unhealthy state. 
			<br><br>
                 <strong>Origin</strong>: Firehose<br>
                 <strong>Type</strong>: Counter (Float)<br>
                 <strong>Frequency</strong>: During event, during each auction<br>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>Per minute delta averaged over a 5-minute window</td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: &ge; 0.5 <br>
                <strong>Red critical</strong>: &ge; 1</td>
        </tr>
<tr>
<th>Recommended response</th>
<td>
    <ol>
	    <li>In order to best determine the root cause, examine the Auctioneer logs. Depending on the specific error or resource constraint, you may also find a failure reason in the CC API.</li>
    <li>Investigate the health of Diego cells.</li>
    <li>Consider scaling additional cells using Ops Manager.</li>
    <li>If scaling cells does not solve the problem, pull Diego brain logs and BBS logs for troubleshooting and contact Pivotal Support for additional troubleshooting. Inform Pivotal Support that Task auctions are failing.</li>
    </ol>
    </td>
</tr>
</table>

## <a id="bbs"></a> Diego BBS Metrics

###<a id="ConvergenceLRPDuration"></a>BBS Time to Run LRP Convergence
<table>
   <tr><th colspan="2" style="text-align: center;"><br>bbs.ConvergenceLRPDuration<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>Time in ns that the BBS took to run its LRP convergence pass. 
          <br><br>
          <strong>Use</strong>: If the convergence run begins taking too long, 
          apps or Tasks may be crashing without restarting. 
          This symptom can also indicate loss of connectivity to the BBS database.
          <br><br>
          <strong>Origin</strong>: Firehose<br>
          <strong>Type</strong>: Gauge (Integer in ns)<br>
          <strong>Frequency</strong>: During event,
                  every 30 seconds when LRP convergence runs, emission should be near-constant on a running deployment
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Maximum over the last 15 minutes divided by 1,000,000,000</td>
   </tr>
      <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: &ge; 10 s<br>
          <strong>Red critical</strong>: &ge; 20 s</td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>
          <ol>
              <li>Check BBS logs for errors.</li>
              <li>Try vertically scaling the BBS VM resources up. 
              For example, add more CPUs or memory depending on its <code>system.cpu</code>/<code>system.memory</code> metrics.</li>
              <li>If that does not solve the issue, pull the BBS logs and contact Pivotal Support for additional troubleshooting.
          </ol>
          </td>
   </tr>
</table>


###<a id="RequestLatency"></a>BBS Time to Handle Requests
<table>
   <tr><th colspan="2" style="text-align: center;"><br>bbs.RequestLatency<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>The maximum observed latency time over the past 60 seconds that the BBS took to handle requests across all its API endpoints.<br><br>
	      Diego is now aggregating this metric to emit the max value observed over 60 seconds.
          <br><br>
          <strong>Use</strong>: If this metric rises, the PCF API is slowing. 
          Response to certain cf CLI commands is slow if request latency is high.
          <br><br>
          <strong>Origin</strong>: Firehose<br>
          <strong>Type</strong>: Gauge (Integer in ns)<br>
          <strong>Frequency</strong>: 60 s<br>
    </tr>
    <tr>
      <th>Recommended measurement</th>
      <td>Average over the last 15 minutes divided by 1,000,000,000</td>
    </tr>
    <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: &ge; 5 s<br>
          <strong>Red critical</strong>: &ge; 10 s</td>
    </tr>
    <tr>
      <th>Recommended response</th>
      <td>
          <ol>
              <li>Check CPU and memory statistics in Ops Manager.</li>
              <li>Check BBS logs for faults and errors that can indicate issues with BBS.</li>
              <li>Try scaling the BBS VM resources up. For example, add more CPUs/memory 
                  depending on its <code>system.cpu</code>/<code>system.memory</code> metrics.</li>
              <li>If the above steps do not solve the issue, collect a sample of the cell logs from the BBS VMs and contact Pivotal Support to troubleshoot further.
          </ol>
          </td>
    </tr>
</table>


###<a id="cc-diego-sync"></a>Cloud Controller and Diego in Sync
<table>
   <tr><th colspan="2" style="text-align: center;"><br>bbs.Domain.cf-apps<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>Indicates if the <code>cf-apps</code> Domain is up-to-date, meaning that CF App requests from Cloud Controller are synchronized to <code>bbs.LRPsDesired</code> (Diego-desired AIs) for execution. 
            <ul>
              <li><code>1</code> means <code>cf-apps</code> Domain is up-to-date</li>
              <li>No data received means <code>cf-apps</code> Domain is not up-to-date</li>
            </ul>
          <strong>Use</strong>: If the <code>cf-apps</code> Domain does not stay up-to-date, changes requested in the Cloud Controller are not guaranteed to propagate throughout the system. If the Cloud Controller and Diego are out of sync, then apps running could vary from those desired.
          <br><br>
          <strong>Origin</strong>: Firehose<br>
          <strong>Type</strong>: Gauge (Float)<br>
          <strong>Frequency</strong>: 30 s<br>
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Average over the last 5 minutes</code></td>
   </tr>
   <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: <em>N/A</em> <br>
      <strong>Red critical</strong>: &lt; 1 </td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>
          <ol>
              <li>Check the BBS logs.</li>
              <li>If the problem continues, pull Diego brain logs and BBS logs 
                  and contact Pivotal Support to say that the <code>cf-apps</code> domain is not being kept fresh.</li>
          </ol>
      </td>
   </tr>
</table>

###<a id="LRPsExtra"></a>More App Instances Than Expected

<table>
     <tr><th colspan="2" style="text-align: center;"><br>bbs.LRPsExtra<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>Total number of LRP instances that are no longer desired but still have a BBS record. 
                    When Diego wants to add more apps, the BBS sends a request to the auctioneer 
                    to spin up additional LRPs. LRPsExtra is the total number of LRP instances that are no longer desired but still have a BBS record. 
                        <br><br>
                <strong>Use</strong>: If Diego has more LRPs running than expected, 
                        there may be problems with the BBS.<br><br>
                        Deleting an app with many instances can temporarily spike this metric.  
                        However, a sustained spike in <code>bbs.LRPsExtra</code> is unusual and should be investigated.
                 <br><br>
                 <strong>Origin</strong>: Firehose<br>
                 <strong>Type</strong>: Gauge (Float)<br>
                 <strong>Frequency</strong>: 30 s<br>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>Average over the last 5 minutes</td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: &ge; 5<br>
                <strong>Red critical</strong>: &ge; 10</td>
        </tr>
        <tr>
                <th>Recommended response</th>
                <td>
                    <ol>
                        <li>Review the BBS logs for proper operation or errors, looking for detailed error messages.</li>
                        <li>If the condition persists, pull the BBS logs and contact Pivotal Support.</li>
                    </ol>
                    </td>
        </tr>
</table>


###<a id="LRPsMissing"></a>Fewer App Instances Than Expected
<table>
     <tr><th colspan="2" style="text-align: center;"><br>bbs.LRPsMissing<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>Total number of LRP instances that are desired but have no record in the BBS. When Diego wants to add more apps, the BBS sends a request to the auctioneer 
                        to spin up additional LRPs. LRPsMissing is the total number of LRP instances that are desired but have no BBS record. 
                        <br><br>
                <strong>Use</strong>: If Diego has less LRP running than expected, there may be problems with the BBS.<br><br> 
                        An app push with many instances can temporarily spike this metric. However, a sustained spike in <code>bbs.LRPsMissing</code> is unusual and should be investigated.
                 <br><br>
                 <strong>Origin</strong>: Firehose<br>
                 <strong>Type</strong>: Gauge (Float)<br>
                 <strong>Frequency</strong>: 30 s<br>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>Average over the last 5 minutes</td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: &ge; 5<br>
                <strong>Red critical</strong>: &ge; 10</td>
        </tr>
        <tr>
                <th>Recommended response</th>
                <td>
                    <ol>
                        <li>Review the BBS logs for proper operation or errors, looking for detailed error messages.</li>
                        <li>If the condition persists, pull the BBS logs and contact Pivotal Support.</li>
                    </ol>
                    </td>
        </tr>
</table>


###<a id="bbs.CrashedActualLRPs"></a>Crashed App Instances
<table>
     <tr><th colspan="2" style="text-align: center;"><br>bbs.CrashedActualLRPs<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>Total number of LRP instances that have crashed.
                <br><br>
                <strong>Use</strong>: Indicates how many instances in the deployment are in a crashed state. 
                An increase in <code>bbs.CrashedActualLRPs</code> can indicate several problems, 
                from a bad app with many instances associated, 
                to a platform issue that is resulting in app crashes. 
                Use this metric to help create a baseline for your deployment. 
                After you have a baseline, you can create a deployment-specific alert to notify of a spike in crashes above the trend line. 
                Tune alert values to your deployment. 
                <br><br>
                <strong>Origin</strong>: Firehose<br>
                 <strong>Type</strong>: Gauge (Float)<br>
                 <strong>Frequency</strong>: 30 s<br>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>Average over the last 5 minutes</td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: Dynamic<br>
                <strong>Red critical</strong>: Dynamic</td>
        </tr>
        <tr>
                <th>Recommended response</th>
                <td>
                    <ol>
                        <li>Look at the BBS logs for apps that are crashing 
                            and at the cell logs to see if the problem is with the apps themselves, rather than 
                            a platform issue.</li>
                        <li>Before contacting Pivotal Support, pull the BBS logs and, if particular apps are the problem,
                            pull the logs from their Diego cells too.</li>
                    </ol>
                    </td>
        </tr>
</table>

###<a id="1hraverageofbbs.LRPsRunning"></a>Running App Instances, Rate of Change
<table>
     <tr><th colspan="2" style="text-align: center;"><br>1hr average of bbs.LRPsRunning – prior 1hr average of bbs.LRPsRunning<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>Rate of change in app instances being started or stopped on the platform. 
                    It is derived from <code>bbs.LRPsRunning</code>
                    and represents the total number of LRP instances that are running on Diego cells.
                    <br><br>
                    <strong>Use</strong>: Delta reflects upward or downward trend for app instances started or stopped. 
                    Helps to provide a picture of the overall growth trend of the environment for capacity planning. 
                    You may want to alert on delta values outside of the expected range.
                    <br><br>
                 <strong>Origin</strong>: Firehose<br>
                 <strong>Type</strong>: Gauge (Float)<br>
                 <strong>Frequency</strong>: During event, 
                         emission should be constant on a running deployment<br>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>derived=(1-hour average of <code>bbs.LRPsRunning</code> – prior 1-hour average of <code>bbs.LRPsRunning</code>)</td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: Dynamic<br>
                <strong>Red critical</strong>: Dynamic</td>
        </tr>
        <tr>
                <th>Recommended response</th>
                <td>
                     Scale components as necessary.
                </td>
        </tr>
</table>



## <a id="cell"></a> Diego Cell Metrics

###<a id="rep.CapacityRemainingMemory"></a>Remaining Memory Available — Cell Memory Chunks Available
<table>
   <tr><th colspan="2" style="text-align: center;"><br>rep.CapacityRemainingMemory<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>Remaining amount of memory in MiB available for this Diego cell to allocate to containers.
          <br><br>
          <strong>Use</strong>: Indicates the available cell memory. Insufficient cell memory can prevent pushing and scaling apps.
          <br><br>
          The strongest operational value of this metric is to understand a deployment's average app size and monitor/alert on ensuring that at least some cells have large enough capacity to accept standard app size pushes. For example, if pushing a 4GB app, Diego would have trouble placing that app if there is no one cell with sufficient capacity of 4GB or greater.
	  <br><br>
	      As an example, Pivotal Cloud Ops uses a standard of 4GB, and computes and monitors for the number of cells with at least 4GB free. When the number of cells with at least 4GB falls below a defined threshold, this is a scaling indicator alert to increase  capacity. This <em>free chunk</em> count threshold should be tuned to the deployment size and the standard size of apps being pushed to the deployment.<br><br>

          <strong>Origin</strong>: Firehose<br>
          <strong>Type</strong>: Gauge (Integer in bytes)<br>
          <strong>Frequency</strong>: 60 s<br>
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td><b>For alerting</b>: <ol>
            <li>Determine the size of a standard app in your deployment. This is the suggested value to calculate <em>free chunks</em> of Remaining Memory by.
	      <li>Create a script/tool that can iterate through each Diego Cell and do the following: 
          <ol>
          <li>Pull the <code>rep.CapacityRemainingMemory</code> metric for each cell.</li>
          <li>Divide the values received by 1000 to get the value in Gigabytes (if desired threshold is GB-based).</li>
          <li>Compare recorded values to your minimum capacity threshold, and count the number of cells that have equal or greater than the desired amount of <em>free chunk</em> space.</li>    
	       </ol>
	 <li> Determine a desired scaling threshold based on the minimum amount of <em>free chunks</em> that are acceptable in this deployment given historical trends.</li>
	 <li> Set an alert to indicate the need to scale cell memory capacity when the value falls below the desired threshold number.</li>
	      </ol> 
	<b>For visualization purposes</b>:<br>
	      Looking at this metric (<code>rep.CapacityRemainingMemory</code>) as a minimum value per cell has more informational value than alerting value. It can be an interesting heatmap visualization, showing average variance and density over time.   
</td>
  </tr>
  <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: Dynamic<br>
          <strong>Red critical</strong>: Dynamic<br>
                 </td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>
          <ol>
              <li>Assign more resources to the cells or assign more cells.</li>
                        <li>Scale additional Diego cells using Ops Manager.</li>
                    </ol>
                    </td>
        </tr>
    <tr>
      <th>Alternative Metric</th>
      <td>      
      If leveraging [PCF Healthwatch](https://network.pivotal.io/products/p-healthwatch), the derived metric [healthwatch.Diego.AvailableFreeChunks](http://docs.pivotal.io/pcf-healthwatch/1-2/metrics.html#free-memory-chunks) is recommended for this purpose. 
      </td>
   </tr>
</table>

###<a id="rep.CapacityRemainingMemory2"></a>Remaining Memory Available — Overall Remaining Memory Available
<table>
   <tr><th colspan="2" style="text-align: center;"><br>rep.CapacityRemainingMemory<br>
       (Alternative Use)<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>Remaining amount of memory in MiB available for this Diego cell to allocate to containers.
          <br><br>
          <strong>Use</strong>: Can indicate low memory capacity overall in the platform. 
          Low memory can prevent app scaling and new deployments. 
          The overall sum of capacity can indicate that you need to scale the platform.
          Observing capacity consumption trends over time helps with capacity planning.
          <br><br>
          <strong>Origin</strong>: Firehose<br>
          <strong>Type</strong>: Gauge (Integer in bytes)<br>
          <strong>Frequency</strong>: 60 s<br>
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Minimum over the last 5 minutes divided by 1024 (across all instances)</td>
  </tr>
  <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: &le; 64 GB<br>
          <strong>Red critical</strong>: &le; 32 GB</td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>
          <ol>
              <li>Assign more resources to the cells or assign more cells.</li>
              <li>Scale additional Diego cells via Ops Manager.</li>
          </ol>
                    </td>
        </tr>
    <tr>
      <th>Alternative Metric</th>
      <td>      
      If leveraging [PCF Healthwatch](https://network.pivotal.io/products/p-healthwatch), the derived metric [healthwatch.Diego.TotalAvailableMemoryCapacity.5M](http://docs.pivotal.io/pcf-healthwatch/1-2/metrics.html#memory-total) is recommended for this purpose. 
      </td>
   </tr>
</table>

###<a id="CapacityRemainingDisk"></a>Remaining Disk Available
<table>
     <tr><th colspan="2" style="text-align: center;"><br> rep.CapacityRemainingDisk<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>Remaining amount of disk in MiB available for this Diego cell to allocate to containers.
                    <br><br>
                    <strong>Use</strong>: Low disk capacity can prevent app scaling and new deployments. Because Diego staging Tasks can fail without at least 4&nbsp;GB free, 
                the recommended red threshold is based on the minimum disk capacity across the deployment
                falling below 4&nbsp;GB in the previous 5 minutes.
		<br><br>
		It can also be meaningful to assess how many chunks of free disk space are above a given threshold, similar to <code>rep.CapacityRemainingMemory</code>.
                 <br><br>
                 <strong>Origin</strong>: Firehose<br>
                 <strong>Type</strong>: Gauge (Integer in bytes)<br>
                 <strong>Frequency</strong>: 60 s<br>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>Minimum over the last 5 minutes divided by 1024 (across all instances)</td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: &le; 8 GB<br>
                <strong>Red critical</strong>: &le; 3.5 GB</td>
        </tr>
        <tr>
                <th>Recommended response</th>
                <td>
                    <ol>
                        <li>Assign more resources to the cells or assign more cells.</li>
                        <li>Scale additional cells using Ops Manager.</li>
                    </ol>
                    </td>
        </tr>
    <tr>
      <th>Alternative Metric</th>
      <td>      
      If leveraging [PCF Healthwatch](https://network.pivotal.io/products/p-healthwatch), the derived metric [healthwatch.Diego.TotalAvailableDiskCapacity.5M](http://docs.pivotal.io/pcf-healthwatch/1-2/metrics.html#disk-total) is recommended for this purpose. 
      </td>
   </tr>
</table>


###<a id="RepBulkSyncDuration"></a>Cell Rep Time to Sync
<table>
     <tr><th colspan="2" style="text-align: center;"><br>rep.RepBulkSyncDuration<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>Time in ns that the Diego Cell Rep took to sync the ActualLRPs that it claimed with its actual garden containers. 
                        <br><br>
                <strong>Use</strong>: Sync times that are too high can indicate issues with the BBS.
                 <br><br>
                 <strong>Origin</strong>: Firehose<br>
                 <strong>Type</strong>: Gauge (Float in ns)<br>
                 <strong>Frequency</strong>: 30 s<br>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>Maximum over the last 15 minutes divided by 1,000,000,000</td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: &ge; 5 s<br>
                <strong>Red critical</strong>: &ge; 10 s </td>
        </tr>
        <tr>
                <th>Recommended response</th>
                <td>
                    <ol>
                        <li>Investigate BBS logs for faults and errors.</li>
                        <li>If a particular cell or cells appear problematic, 
                            pull logs for the cells and the BBS logs before contacting Pivotal Support.</li>
                    </ol>
                    </td>
        </tr>
</table>

###<a id="UnhealthyCell"></a>Unhealthy Cells

<table>
     <tr><th colspan="2" style="text-align: center;"><br>rep.UnhealthyCell<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>The Diego cell periodically checks its health against the garden backend. 
                    For Diego cells, <code>0</code> means healthy, and <code>1</code> means unhealthy.
                    <br><br>
                    <strong>Use</strong>: Set an alert for further investigation if 
                    multiple unhealthy Diego cells are detected in the given time window. 
                    If one cell is impacted, it does not participate in auctions, but end-user impact is usually low. If multiple cells are impacted, this can indicate a larger problem with Diego, and should be considered a more critical investigation need.
                 <br><br>
		Suggested alert threshold based on multiple unhealthy cells in the given time window.
		<br><br>
		Although end-user impact is usually low if only one cell is impacted, this should still be investigated. Particularly in a lower capacity environment, this situation could result in negative end-user impact if left unresolved.
		<br><br>
                 <strong>Origin</strong>: Firehose<br>
                 <strong>Type</strong>: Gauge (Float, 0-1)<br>
                 <strong>Frequency</strong>: 30 s<br>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>Maximum over the last 5 minutes</td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: = 1<br>
                <strong>Red critical</strong>: &gt; 1 </td>
        </tr>
        <tr>
                <th>Recommended response</th>
                <td>
                    <ol>
                        <li>Investigate Diego cell servers for faults and errors.</li>
                        <li>If a particular cell or cells appear problematic, 
                            pull logs for that cell, as well as the BBS logs before contacting Pivotal Support. The Cell ID is the same as the BOSH instance ID.</li>
                    </ol>
                    </td>
        </tr>
</table>

## <a id="locket"></a> Diego Locket Metrics

###<a id="ActiveLocks"></a>Active Locks
<table>
   <tr><th colspan="2" style="text-align: center;"><br>locket.ActiveLocks<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>Total count of how many locks the system components are holding.
          <br><br>
          <strong>Use</strong>: If the ActiveLocks count is not equal to the expected value, there is likely a problem with Diego.
          <br><br>
          <strong>Origin</strong>: Firehose<br>
          <strong>Type</strong>: Gauge<br>
          <strong>Frequency</strong>: 60 s
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Maximum over the last 5 minutes</td>
   </tr>
      <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: <em>N/A</em> <br>
          <strong>Red critical</strong>: &ne; 4</td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>
          <ol>
             <li>Run <code>monit status</code> to inspect for failing processes.</li>
             <li>If there are no failing processes, then review the logs for the components using the Locket service: 
                      BBS, Auctioneer, TPS Watcher, and Routing API. Look for indications that only one of each component is active at a time.</li>
              <li>Focus triage on the BBS first:
                <ul>
                  <li>A healthy BBS shows obvious activity around starting or claiming LRPs.</li>
                  <li>An unhealthy BBS leads to the Auctioneer showing minimal or no activity. The BBS sends work to the Auctioneer.</li>
		              <li>Reference the BBS-level Locket metric <a href="kpi.html#BBSActiveLocks">Locks Held by BBS</a>. A value of 0 indicates Locket issues at the BBS level.</li>
                </ul>
              <li>If the BBS appears healthy, then check the Auctioneer to ensure it is processing auction payloads.</li>
	              <ul>
                  <li>Recent logs for Auctioneer should show all but one of its instances are currently waiting on locks,
                      and the active Auctioneer should show a record of when it last attempted to execute work. This attempt should correspond to app development activity, such as <code>cf push</code>.</li>
                  <li>Reference the Auctioneer-level Locket metric <a href="kpi.html#AuctioneerActiveLocks">Locks Held by Auctioneer</a>. A value of 0 indicates Locket issues at the Auctioneer level.</li>
                </ul>
	            <li>The TPS Watcher is primarily active when app instances crash. Therefore, if the TPS Watcher is suspected, review the most recent logs.</li>
              <li>If you are unable to resolve on-going excessive active locks, pull logs from the Diego BBS and Auctioneer VMs,
                  which includes the Locket service component logs, and contact Pivotal Support.</li>
          </ol>
          </td>
   </tr>
</table>

###<a id="BBSActiveLocks"></a>Locks Held by BBS
<table>
   <tr><th colspan="2" style="text-align: center;"><br>bbs.LockHeld<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>Whether a BBS instance holds the expected BBS lock (in Locket). 1 means the active BBS server holds the lock, and 0 means the lock was lost.
          <br><br>
          <strong>Use</strong>: This metric is complimentary to <a href="kpi.html#ActiveLocks">Active Locks</a>, and it offers a BBS-level version of the Locket metrics. Although it is emitted per BBS instance, only 1 active lock is held by BBS. Therefore, the expected value is 1. The metric may occasionally be 0 when the BBS instances are performing a leader transition, but a prolonged value of 0 indicates an issue with BBS.
          <br><br>
          <strong>Origin</strong>: Firehose<br>
          <strong>Type</strong>: Gauge<br>
          <strong>Frequency</strong>: Periodically
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Maximum over the last 5 minutes</td>
   </tr>
      <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: <em>N/A</em> <br>
          <strong>Red critical</strong>: &ne; 1</td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>
          <ol>
             <li>Run <code>monit status</code> on the Diego database VM to check for failing processes.</li>
             <li>If there are no failing processes, then review the logs for BBS.
                 <ul>
                   <li>A healthy BBS shows obvious activity around starting or claiming LRPs.</li>
                   <li>An unhealthy BBS leads to the Auctioneer showing minimal or no activity. The BBS sends work to the Auctioneer.</li>
                 </ul>
             <li>If you are unable to resolve the issue, pull logs from the Diego BBS and Auctioneer VMs,
                  which include the Locket service component logs, and contact Pivotal Support.</li>
          </ol>
          </td>
   </tr>
</table>

###<a id="AuctioneerActiveLocks"></a>Locks Held by Auctioneer 
<table>
   <tr><th colspan="2" style="text-align: center;"><br>auctioneer.LockHeld<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>Whether an Auctioneer instance holds the expected Auctioneer lock (in Locket). 1 means the active Auctioneer holds the lock, and 0 means the lock was lost.
          <br><br>
          <strong>Use</strong>: This metric is complimentary to <a href="kpi.html#ActiveLocks">Active Locks</a>, and it offers an Auctioneer-level version of the Locket metrics. Although it is emitted per Auctioneer instance, only 1 active lock is held by Auctioneer. Therefore, the expected value is 1. The metric may occasionally be 0 when the Auctioneer instances are performing a leader transition, but a prolonged value of 0 indicates an issue with Auctioneer. 
          <br><br>
          <strong>Origin</strong>: Firehose<br>
          <strong>Type</strong>: Gauge<br>
          <strong>Frequency</strong>: Periodically
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Maximum over the last 5 minutes</td>
   </tr>
      <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: <em>N/A</em> <br>
          <strong>Red critical</strong>: &ne; 1</td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>
          <ol>
             <li>Run <code>monit status</code> on the Diego Database VM to check for failing processes.</li>
             <li>If there are no failing processes, then review the logs for Auctioneer.
                 <ul>
                   <li>Recent logs for Auctioneer should show all but one of its instances are currently waiting on locks, and the active Auctioneer should show a record of when it last attempted to execute work. This attempt should correspond to app development activity, such as <code>cf push</code>.</li>
                 </ul>
             <li>If you are unable to resolve the issue, pull logs from the Diego BBS and Auctioneer VMs,
                  which includes the Locket service component logs, and contact Pivotal Support.</li>
          </ol>
          </td>
   </tr>
</table>

###<a id="ActivePresences"></a>Active Presences
<table>
   <tr><th colspan="2" style="text-align: center;"><br>locket.ActivePresences<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>Total count of active presences. Presences are defined as the registration records that the cells maintain to advertise themselves to the platform. 
          <br><br>
          <strong>Use</strong>: If the Active Presences count is far from the expected, there might be a problem with Diego. 
	          <br><br>
                  The number of active presences varies according to the number of cells deployed.
                  Therefore, during purposeful scale adjustments to PCF, this alerting threshold should be adjusted.<br>
                  Establish an initial threshold by observing the historical trends for the deployment over a brief period of time,
                  Increase the threshold as more cells are deployed.
                  During a rolling deploy, this metric shows variance during the BOSH lifecycle when cells are evacuated and restarted. 
                  Tolerable variance is within the bounds of the max inflight range,
                  <code>Max Inflight Container Starts</code> established in Pivotal Application Service (PAS).
          <br><br>
          <strong>Origin</strong>: Firehose<br>
          <strong>Type</strong>: Gauge<br>
          <strong>Frequency</strong>: 60 s
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Maximum over the last 15 minutes</td>
   </tr>
      <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: Dynamic <br>
          <strong>Red critical</strong>: Dynamic</td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>
          <ol>
	      <li>Ensure that the variance is not the result of an active rolling deploy.
                  Also ensure that the alert threshold is appropriate to the number of cells in the current deployment.</li>
	      <li>Run <code>monit status</code> to inspect for failing processes.</li>
              <li>If there are no failing processes, then review the logs for the components using the Locket service: BBS, Auctioneer, TPS Watcher, and Routing API.</li>
              <li>Focus triage on the BBS first:
                  <ul>
                    <li>A healthy BBS shows obvious activity around starting or claiming LRPs.</li>
                    <li>An unhealthy BBS leads to the Auctioneer showing minimal or no activity. The BBS sends work to the Auctioneer.</li>
                  </ul>
              <li>If the BBS appears healthy, then check the Auctioneer to ensure it is processing auction payloads.<br>
                  Recent logs for the active Auctioneer should show a record of when it last attempted to execute work.
                  This attempt should correspond to app dev activity, such as a cf push.
                  The TPS Watcher is primarily only active when application instances crash, so if the TPS Watcher is suspected, review the most recent logs.</li>
	      <li>If you are unable to resolve the problem, pull the logs from the Diego BBS and Auctioneer VMs,
                  which include the Locket service component logs, and contact Pivotal Support.</li>
	  </ol>
          </td>
   </tr>
</table>

##<a id="route_emitter"></a>Diego Route Emitter Metrics

###<a id="RouteEmitterSyncDuration"></a>Route Emitter Time to Sync
<table>
     <tr><th colspan="2" style="text-align: center;"><br>route_emitter.RouteEmitterSyncDuration<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>Time in ns that the active Route Emitter took to perform its synchronization pass.
                    <br><br>
                    <strong>Use</strong>: Increases in this metric indicate that the Route Emitter may have
                    trouble maintaining an accurate routing table to broadcast to the Gorouters.
                    Tune alerting values to your deployment based on historical data and adjust based on observations over time. 
                    The suggested starting point is &ge; 5 for the yellow threshold and &ge; 10 for the critical threshold. 
                    Pivotal has observed on its Pivotal Web Services deployment that above 10 s, the BBS may be failing.
                 <br><br>
                 <strong>Origin</strong>: Firehose<br>
                 <strong>Type</strong>: Gauge (Float in ns)<br>
                 <strong>Frequency</strong>: 60 s<br>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>Maximum, per job, over the last 15 minutes divided by 1,000,000,000</td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: Dynamic<br>
                <strong>Red critical</strong>: Dynamic</td>
        </tr>
        <tr>
                <th>Recommended response</th>
                <td>If all or many jobs showing as impacted, there is likely an issue with Diego.
                        <ol>
                        <li>
                        Investigate the Route Emitter and Diego BBS logs for errors.
                        </li>
                        <li>
                        Verify that app routes are functional by making a request to an app, pushing an app and pinging it, or if applicable, checking that your smoke tests have passed.
                        </li>
                        </ol>
		If one or a few jobs showing as impacted, there is likely a connectivity issue and the impacted job should be investigated further. 
                </td>
        </tr>
</table>

## <a id="kpi4MySQL"></a>PAS MySQL KPIs

When PAS uses an internal MySQL database, as configured in the PAS tile **Settings** tab > **Databases** pane, the database cluster generates KPIs as described below.

[//]: # (partial '../mysql/mysql_kpis' contents pasted below)
[//]: # (calling partial causes header format problems)
[//]: # (keep below and docs-mysql/_mysql_kpis.html.md.erb in sync)

### <a id="server-heartbeat"></a> MySQL Server Availability

|| **<%= vars.mysql_metrics_origin %>/available** |
| --- | --- |
| **Description** | The MySQL Server is currently responding to requests, which indicates that the server is running.<br><br> **Use:** This metric is especially useful in single-node mode, where cluster metrics are not relevant. If the server does not emit heartbeats, it is offline.<br><br>**Origin:** Firehose<br> **Envelope Type:** Gauge<br> **Unit:** boolean<br>**Frequency:** 30 s (default) |
| **Recommended measurement** | Average over the last 5 minutes |
| **Recommended alert thresholds** | **Yellow warning:** N/A<br> **Red critical:** < 1  |
| **Recommended response** | Run [`mysql-diag`](http://docs.pivotal.io/p-mysql/1-9/mysql-diag.html) and check the MySQL Server logs for errors.  |

### <a id="wsrep-ready"></a> Galera Cluster Node Readiness

|| **<%= vars.mysql_metrics_origin %>/galera/wsrep_ready** |
| --- | --- |
| **Description** | Shows whether each cluster node can accept queries. Returns only 0 or 1. When this metric is 0, almost all queries to that node fail with the error:<br> ```ERROR 1047 (08501) Unknown Command```<br><br> **Use:** Discover when nodes of a cluster have been unable to communicate and, thus, unable to accept transactions.<br><br>**Origin:** Firehose<br> **Envelope Type:** Gauge<br> **Unit:** boolean<br>**Frequency:** 30 s (default) |
| **Recommended measurement** | Average of values of each cluster node, over the last 5 minutes |
| **Recommended alert thresholds** | **Yellow warning:** < 1.0<br> **Red critical:** 0 (cluster is down)  |
| **Recommended response** | - Run [`mysql-diag`](http://docs.pivotal.io/p-mysql/1-9/mysql-diag.html) and check the MySQL Server logs for errors.<br> - Make sure there has been no infrastructure event that affects intra-cluster communication.<br>- Ensure that `wsrep_ready` has not been set to off by using the query:<br>```SHOW STATUS LIKE 'wsrep_ready';``` |

### <a id="wsrep-cluster-size"></a> Galera Cluster Size

|| **<%= vars.mysql_metrics_origin %>/galera/wsrep\_cluster\_size** |
| --- | --- |
| **Description** | The number of cluster nodes with which each node is communicating normally.<br><br> **Use:** When running in a multi-node configuration, this metric indicates if each member of the cluster is communicating normally with all other nodes.<br><br>**Origin:** Firehose<br> **Envelope Type:** Gauge<br> **Unit:** count<br>**Frequency:** 30 s (default) |
| **Recommended measurement** | (Average of the values of each node / cluster size), over the last 5 minutes |
| **Recommended alert thresholds** | **Yellow warning:** < 3.0 (availability compromised)<br> **Red critical:** < 1.0 (cluster unavailable) |
| **Recommended response** | Run [`mysql-diag`](http://docs.pivotal.io/p-mysql/1-9/mysql-diag.html) and check the MySQL Server logs for errors.  |

### <a id="wsrep-cluster-status"></a> Galera Cluster Status

|| **<%= vars.mysql_metrics_origin %>/galera/wsrep\_cluster\_status** |
| --- | --- |
| **Description** | Shows the primary status of the cluster component that the node is in.<br>Values are:<br> - Primary = 1<br> - Non-primary = 0<br> - Disconnected = -1<br> See: [https://mariadb.com/kb/en/mariadb/galera-cluster-status-variables/](https://mariadb.com/kb/en/mariadb/galera-cluster-status-variables/ ) <br><br> **Use:** Any value other than "Primary" indicates that the node is part of a nonoperational component. This occurs in cases of multiple membership changes that result in a loss of quorum.<br><br>**Origin:** Firehose<br> **Envelope Type:** Gauge<br> **Unit:** integer (see above)<br>**Frequency:** 30 s (default) |
| **Recommended measurement** | Sum of each of the nodes, over the last 5 minutes |
| **Recommended alert thresholds** | **Yellow warning:** < 3 <br> **Red critical:** < 1  |
| **Recommended response** | - Check node status to ensure that they are all in working order and able to receive write-sets.<br> - Run [`mysql-diag`](http://docs.pivotal.io/p-mysql/1-9/mysql-diag.html) and check the MySQL Server logs for errors.  |

### <a id="connections"></a> Connections per Second

|| **<%= vars.mysql_metrics_origin %>/net/connections** |
| --- | --- |
| **Description** | Connections per second made to the server.<br><br> **Use:** If the number of connections drastically changes or if apps are unable to connect, there might be a network or app issue.<br><br> **Origin:** Firehose<br> **Envelope Type:** Gauge<br> **Unit:** count<br> **Frequency:** 30 s (default) |
| **Recommended measurement** | (Average of all nodes / max connections), over last 1 minute |
| **Recommended alert thresholds** | **Yellow warning:** > 80%<br> **Red critical:** > 90% |
| **Recommended response** | - Run [`mysql-diag`](http://docs.pivotal.io/p-mysql/1-9/mysql-diag.html) and check the MySQL Server logs for errors.<br> - When approaching 100% of max connections, Apps may be experiencing times when they cannot connect to the database. The connections per second for the cluster vary based on application instances and app utilization. If this threshold is met or exceeded for an extended period of time, monitor app usage to ensure everything is behaving as expected. |

### <a id="open-files"></a> Query Rate

|| **<%= vars.mysql_metrics_origin %>/performance/questions** |
| --- | --- |
| **Description** | The rate of statements execute by the server, shown as queries per second.<br><br> **Use:** The cluster should always be processing some queries, if just as part of the internal automation. <br><br> **Origin:** Firehose<br> **Envelope Type:** Gauge<br> **Unit:** count<br>**Frequency:** 30 s (default) |
| **Recommended measurement** | Average over the last two minutes |
| **Recommended alert thresholds** | **Yellow warning:** 0 for 90 s <br>**Red critical:** 0 for 120 s|
| **Recommended response** | If the rate is ever zero for an extended time, run [`mysql-diag`](http://docs.pivotal.io/p-mysql/1-9/mysql-diag.html) and investigate the MySQL server logs to understand why query rate changed and determine appropriate action. |

### <a id="busy-time"></a> MySQL CPU Busy Time

|| **<%= vars.mysql_metrics_origin %>/performance/busy_time** |
| --- | --- |
| **Description** | Percentage of CPU time spent by MySQL on user activity, executing user code, as opposed to kernel activity processing system calls.<br><br> **Use:** This closely reflects the amount of server activity dedicated to app queries.<br><br>**Origin:** Firehose<br> **Envelope Type:** Gauge<br> **Unit:** percentage<br> **Frequency:** 30 s (default) |
| **Recommended measurement** | Average over last 2 minutes |
| **Recommended alert thresholds** | **Yellow warning:** > 80%<br> **Red critical:** > 90% |
| **Recommended response** | - If this metric meets or exceeds the recommended thresholds for extended periods of time, run `SHOW PROCESSLIST` and identify which queries or apps are using so much CPU. Optionally redeploy the MySQL jobs using VMs with more CPU capacity.<br> - Run [`mysql-diag`](http://docs.pivotal.io/p-mysql/1-9/mysql-diag.html) and check the MySQL Server logs for errors. |

##<a id="gorouter"></a>Gorouter Metrics

###<a id="file_descriptors"></a>Router File Descriptors
<table>
  <tr><th colspan="2" style="text-align: center;"><br>gorouter.file_descriptors<br><br></th></tr>
  <tr>
    <th width="25%">Description</th>
      <td>The number of file descriptors currently used by the Gorouter job.
        <br><br>
        <strong>Use</strong>: Indicates an impending issue with the Gorouter.
        Without proper mitigation, it is possible for an unresponsive app to eventually exhaust available Gorouter file descriptors and cause route starvation for other apps running on PCF. Under heavy load, this unmitigated situation can also result in the Gorouter losing its connection to NATS and all routes being pruned.
        <br><br>
        While a drop in <code>gorouter.total_routes</code> or an increase in <code>gorouter.ms_since_last_registry_update</code> helps to surface that the issue may already be occurring, alerting on <code>gorouter.file_descriptors</code> indicates that such an issue is impending.
        <br><br>
	      The Gorouter limits the number of file descriptors to 100,000 per job. Once the limit is met, the Gorouter is unable to establish any new connections.
	      <br><br>
	      To reduce the risk of DDoS attacks, Pivotal recommends doing one or both of the following:
        <br><br>
          <ul>
            <li>Within PAS, set <strong>Max Connections Per Backend</strong> to define how many requests can be routed to any particular app instance. This prevents a single app from using all Gorouter connections. The value specified should be determined by the operator based on the use cases for that foundation. For example, Pivotal sets the number of connections to 500 for Pivotal Web Services.</li>
	          <li>Add rate limiting at the load balancer level.</li>
          </ul>
        <strong>Origin</strong>: Firehose<br>
        <strong>Type</strong>: Gauge<br>
        <strong>Frequency</strong>: 5 s<br>
      </td>
    </tr>
    <tr>
      <th>Recommended measurement</th>
      <td>Maximum, per Gorouter job, over the last 5 minutes</td>
    </tr>
    <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: 50,000 per job<br>
          <strong>Red critical</strong>: 60,000 per job</td>
    </tr>
    <tr>
      <th>Recommended response</th>
      <td>
	      <ol>
            <li>Identify which app(s) are requesting excessive connections and resolve the impacting issues with these apps.</li>
            <li>If the above recommended mitigation steps have not already been taken, do so.</li>
            <li>Consider adding more Gorouter VM resources to increase the number of available file descriptors.</li>
        </ol>
      </td>
    </tr>
</table>

###<a id="exhausted_connections"></a>Router Exhausted Connections
<table>
  <tr><th colspan="2" style="text-align: center;"><br>gorouter.backend_exhausted_conns<br><br></th></tr>
  <tr>
    <th width="25%">Description</th>
      <td>The lifetime number of requests that have been rejected by the Gorouter VM due to the <code>Max Connections Per Backend</code> limit being reached across all tried backends. The limit controls the number of concurrent TCP connections to any particular app instance and is configured within PAS. 
        <br><br>
        <strong>Use</strong>: Indicates that PCF is mitigating risk to other applications by self-protecting the platform against one or more unresponsive applications. Increases in this metric indicate the need to investigate and resolve issues with potentially unresponsive applications. A rapid rate of change upward is concerning and should be assessed further. 
	      <br><br>
        <strong>Origin</strong>: Firehose<br>
        <strong>Type</strong>: Counter (Integer) <br>
        <strong>Frequency</strong>: 5 s<br>
      </td>
    </tr>
    <tr>
      <th>Recommended measurement</th>
      <td>Maximum delta per minute, per Gorouter job, over a 5-minute window</td>
    </tr>
    <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: Dynamic<br>
          <strong>Red critical</strong>: Dynamic</td>
    </tr>
    <tr>
      <th>Recommended response</th>
      <td>
	      <ol>
            <li>If <code>gorouter.backend_exhausted_conns</code> spikes, first look to the Router Throughput metric <code>gorouter.total_requests</code> to determine if this measure is high or low in relation to normal bounds for this deployment.</li>
            <li>If Router Throughput appears within normal bounds, it is likely that <code>gorouter.backend_exhausted_conns</code> is spiking due to an unresponsive application, possibly due to application code issues or underlying application dependency issues. To help determine the problematic application, look in access logs for repeated calls to one application. Then proceed to troubleshoot this application accordingly.</li>
            <li>If Router Throughput also shows unusual spikes, the cause of the increase in <code>gorouter.backend_exhausted_conns</code> spikes is likely external to the platform. Unusual increases in load may be due to expected business events driving additional traffic to applications. Unexpected increases in load may indicate a DDoS attack risk.</li>
        </ol>
      </td>
    </tr>
</table>

###<a id="total_requests"></a>Router Throughput

<table>
   <tr><th colspan="2" style="text-align: center;"><br>gorouter.total_requests<br><br></th></tr>
   <tr>
      <th width="25%">Description</th>
      <td>The lifetime number of requests completed by the Gorouter VM, emitted per Gorouter instance 
          <br><br>
          <strong>Use</strong>: The aggregation of these values across all Gorouters provide insight into the overall traffic flow of a deployment. Unusually high spikes, if not known to be associated with an expected increase in demand, could indicate a DDoS risk. For performance and capacity management, consider this metric a measure of router throughput per job, converting it to requests-per-second, by looking at the delta value of <code>gorouter.total_requests</code> and deriving back to 1s, or <code>gorouter.total_requests.delta)/5</code>, per Gorouter instance. This helps you see trends in the throughput rate that indicate a need to scale the Gorouter instances. Use the trends you observe to tune the threshold alerts for this metric. 
          <br><br>
          <strong>Origin</strong>: Firehose<br>
          <strong>Type</strong>: Counter (Integer)<br>
          <strong>Frequency</strong>: 5 s<br>
   </tr>
   <tr>
      <th>Recommended measurement</th>
      <td>Average over the last 5 minutes of the derived per second calculation</td>
   </tr>
   <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: Dynamic<br>
          <strong>Red critical</strong>: Dynamic</td>
   </tr>
   <tr>
      <th>Recommended response</th>
      <td>For optimizing the Gorouter, consider the requests-per-second
          derived metric in the context of router latency and Gorouter VM CPU utilization. From performance and load testing of the Gorouter, Pivotal has observed that at approximately 2500 requests per second, latency can begin to increase. 
          <br><br>
          To increase throughput and maintain low latency, 
          scale the Gorouters either horizontally or vertically 
          and watch that the <a href="#cpu.user">system.cpu.user</a> metric for the Gorouter stays in the suggested range of 60-70% CPU Utilization.
</tr>
</table>

###<a id="latency"></a>Router Handling Latency
<table>
     <tr><th colspan="2" style="text-align: center;"><br>gorouter.latency<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>The time in milliseconds that the Gorouter takes to handle requests to backend endpoints, which include both applications routable platform system APIs like Cloud Controller and UAA. 
                    This is the average round trip response time, which includes router handling. 
                    <br><br>
                    <strong>Use</strong>: Indicates how Gorouter jobs in PCF are impacting overall responsiveness. 
                    Latencies above 100 ms can indicate problems with the network, misbehaving backends, 
                    or the need to scale the Gorouter itself due to ongoing traffic congestion. 
                    An alert value on this metric should be tuned to the specifics of the deployment and its underlying network considerations; 
                    a suggested starting point is 100 ms. 
                 <br><br>
                 <strong>Origin</strong>: Firehose<br>
                 <strong>Type</strong>: Gauge (Float in ms)<br>
                 <strong>Frequency</strong>: Emitted per Gorouter request,
                         emission should be constant on a running deployment
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>Average over the last 30 minutes</td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: Dynamic<br>
                <strong>Red critical</strong>: Dynamic</td>
        </tr>
        <tr>
                <th>Recommended response</th>
                <td>Extended periods of high latency can point to several factors. 
                    The Gorouter latency measure includes network and backend latency impacts as well.<br><br>
                    <ol>
                        <li>First inspect logs for network issues and indications of misbehaving backends.</li>
                        <li>If it appears that the Gorouter needs to scale due to ongoing traffic congestion, 
                            do not scale on the latency metric alone. You should also look at the CPU utilization of the Gorouter VMs and keep it within a maximum 60-70% range.</li>
                        <li>Resolve high utilization by scaling the Gorouter.</li>
                    </ol>
                    </td>
        </tr>
</table>

###<a id="mssincelastregistryupdate"></a>Time Since Last Route Register Received
<table>
     <tr><th colspan="2" style="text-align: center;"><br>gorouter.ms_since_last_registry_update<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>Time in milliseconds since the last route register was received, emitted per Gorouter instance
                        <br><br>
                <strong>Use</strong>: Indicates if routes are not being registered to apps correctly. 
                 <br><br>
                 <strong>Origin</strong>: Firehose<br>
                 <strong>Type</strong>: Gauge (Float in ms)<br>
                 <strong>Frequency</strong>: 30 s<br>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>Maximum over the last 5 minutes</td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: <em>N/A</em> <br>
                <strong>Red critical</strong>: &gt; 30,000<br>
                        This threshold is suitable for normal platform usage. It alerts if it has been 
                        at least 30 seconds since the Gorouter last received a message from an app.</td>
        </tr>
        <tr>
                <th>Recommended response</th>
                <td>
                    <ol>
                        <li>Search the Gorouter and Route Emitter logs for connection issues to NATS.</li>
                        <li>Check the BOSH logs to see if the NATS, Gorouter, or Route Emitter VMs are failing.</li>
                        <li>Look more broadly at the health of all VMs, particularly Diego-related VMs.</li>
                        <li>If problems persist, pull the Gorouter and Route Emitter logs and contact 
                            Pivotal Support to say there are consistently long delays in route registry.</li>
                    </ol>
                    </td>
        </tr>
</table>

###<a id="bad_gateways"></a>Router Error: 502 Bad Gateway

<table>
     <tr><th colspan="2" style="text-align: center;"><br>gorouter.bad_gateways<br><br></th></tr>
     <tr>
         <th width="25%">Description</th>
            <td>The lifetime number of bad gateways, or 502 responses, from the Gorouter itself, emitted per Gorouter instance.<br>
                The Gorouter emits a 502 bad gateway error when it has a route in the routing table 
                and, in attempting to make a connection to the backend, finds that the backend does not exist.
                    <br><br>
                    <strong>Use</strong>: Indicates that route tables might be stale.
                    Stale routing tables suggest an issue in the route register management plane, 
                    which indicates that something has likely changed with the locations of the containers. 
                    Always investigate unexpected increases in this metric.
                    <br><br>
                 <strong>Origin</strong>: Firehose<br>
                 <strong>Type</strong>: Count (Integer, Lifetime)<br>
                 <strong>Frequency</strong>: 5 s<br>
             </td>
     </tr>
     <tr>
                <th>Recommended measurement</th>
                <td>Maximum delta per minute over a 5-minute window</td>
     </tr>
     <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: Dynamic<br>
                <strong>Red critical</strong>: Dynamic</td>
     </tr>
     <tr>
                <th>Recommended response</th>
                <td>
                    <ol>
                        <li>Check the Gorouter and Route Emitter logs to see if they are experiencing issues when connecting to NATS.</li>
                        <li>Check the BOSH logs to see if the NATS, Gorouter, or Route Emitter VMs are failing.</li>
                        <li>Look broadly at the health of all VMs, particularly Diego-related VMs.</li>
                        <li>If problems persist, pull Gorouter and Route Emitter logs and contact 
                            Pivotal Support to say there has been an unusual increase in Gorouter bad gateway responses.</li>
                    </ol>
                    </td>
     </tr>
</table>

###<a id="responses.5xx"></a>Router Error: Server Error
<table>
     <tr><th colspan="2" style="text-align: center;"><br>gorouter.responses.5xx<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>The lifetime number of requests completed by the Gorouter VM for HTTP status family 5xx, server errors, emitted per Gorouter instance.
                    <br><br>
                    <strong>Use</strong>: A repeatedly crashing app is often the cause of a big increase in 5xx responses.
                    However, response issues from apps can also cause an increase in 5xx responses.
                    Always investigate an unexpected increase in this metric.
                 <br><br>
                 <strong>Origin</strong>: Firehose<br>
                 <strong>Type</strong>: Counter (Integer)<br>
                 <strong>Frequency</strong>: 5 s<br>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>Maximum delta per minute over a 5-minute window</code></td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: Dynamic<br>
                <strong>Red critical</strong>: Dynamic</td>
        </tr>
        <tr>
                <th>Recommended response</th>
                <td>
                    <ol>
                        <li>Look for out-of-memory errors and other app-level errors.</li>
                        <li>As a temporary measure, ensure that the troublesome app is scaled to more than one instance.</li>
                    </ol>
                    </td>
        </tr>
</table>

###<a id="total_routes"></a>Number of Gorouter Routes Registered
<table>
     <tr><th colspan="2" style="text-align: center;"><br>gorouter.total_routes<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>The current total number of routes registered with the Gorouter, emitted per Gorouter instance
                    <br><br>
                    <strong>Use</strong>: The aggregation of these values across all Gorouters indicates uptake and gives a picture of the overall growth of the environment for capacity planning.
			<br><br>
		Pivotal also recommends alerting on this metric if the number of routes falls outside of the normal range for your deployment. Dramatic decreases in this metric volume may indicate a problem with the route registration process, such as an app outage, or that something in the route register management plane has failed.
			<br><br>
			If visualizing these metrics on a dashboard, <code>gorouter.total_routes</code> can be helpful for visualizing dramatic drops. However, for alerting purposes, the <code>gorouter.ms_since_last_registry_update</code> metric is more valuable for quicker identification of Gorouter issues. Alerting thresholds for <code>gorouter.total_routes</code> should focus on dramatic increases or decreases out of expected range.   
                 <br><br>
                 <strong>Origin</strong>: Firehose<br>
                 <strong>Type</strong>: Gauge (Float)<br>
                 <strong>Frequency</strong>: 30 s<br>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>5-minute average of the per second delta</td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: Dynamic<br>
                <strong>Red critical</strong>: Dynamic</td>
        </tr>
        <tr>
                <th>Recommended response</th>
                <td>
                    <ol>
                        <li>For capacity needs, scale up or down the Gorouter VMs as necessary.</li>
                        <li>For significant drops in current total routes, see the 
                           <a href="#mssincelastregistryupdate"> <code>gorouter.ms_since_last_registry_update</code></a>
                            metric value for additional context.</li>
                        <li>Check the Gorouter and Route Emitter logs to see if they are experiencing issues when connecting to NATS.</li>
                        <li>Check the BOSH logs to see if the NATS, Gorouter, or Route Emitter VMs are failing.</li>
                        <li>Look broadly at the health of all VMs, particularly Diego-related VMs.</li>
                        <li>If problems persist, pull the Gorouter and Route Emitter logs and contact Pivotal Support.</li>
                    </ol>
                    </td>
        </tr>
</table>

###<a id="route-registration"></a>Number of Route Registration Messages Sent and Received

<table>
     <tr><th colspan="2" style="text-align: center;"><br>gorouter.registry_message.route-emitter<br>route_emitter.HTTPRouteNATSMessagesEmitted<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>
      This KPI is based on the following metrics:
      <br><br>
      <ul>
        <li><code>route_emitter.HTTPRouteNATSMessagesEmitted</code> reports the lifetime number of route registration messages sent by the Route Emitter component. The metric is emitted for each Route Emitter.</li>
        <li><code>gorouter.registry_message.route-emitter</code> reports the lifetime number of route registration messages received by the Gorouter. The metric is emitted for each Gorouter instance.</li>
      </ul>
      Dynamic configuration that enables the Gorouter to route HTTP requests to apps is published by the Route Emitter component colocated on each Diego cell to the NATS clustered message bus.
      All router instances subscribed to this message bus receive the same configuration. (Router instances within an isolation segment receive configuration only for cells in the same isolation segment.)
      <br><br>
      As Gorouters prune app instances from the route when a TTL expires, each Route Emitter periodically publishes the routing configuration for the app instances on the same cell.
      <br><br>
      Therefore, the aggregate number of route registration messages published by all the Route Emitters should be equal to the number of messages received by each Gorouter instance.
                  <br><br>
                  <strong>Use</strong>: A difference in the rate of change of these metrics is an indication of an issue in the control plane responsible for updating the routers with changes to the routing table.
			<br><br>
			Pivotal recommends alerting when the number of messages received per second for a given router instance falls below the sum of messages emitted per second across all Route Emitters.
			<br><br>
			If visualizing these metrics on a dashboard, look for increases in the difference between the rate of messages received and sent. If the number of messages received by a Gorouter instance drops below the sum of messages sent by the Route Emitters, this is an indication of a problem in the control plane.
                 	<br><br>
                 	<strong>Origin</strong>: Firehose<br>
                 	<strong>Type</strong>: Counter<br>
                  <strong>Frequency</strong>: With each event<br>
		</td>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>Difference of 5-minute average of the per second deltas for <code>gorouter.registry_message.route-emitter</code> and sum of <code>route_emitter.HTTPRouteNATSMessagesEmitted</code> for all Route Emitters</td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: Dynamic<br>
                <strong>Red critical</strong>: Dynamic</td>
        </tr>
        <tr>
                <th>Recommended response</th>
                <td>
                    <ol>
                        <li>Check the Gorouter and Route Emitter logs to see if they are experiencing issues when connecting to NATS.</li>
                        <li>Check the BOSH logs to see if the NATS, Gorouter, or Route Emitter VMs are failing.</li>
                        <li>Look broadly at the health of all VMs, particularly Diego-related VMs.</li>
                        <li>If problems persist, pull the Gorouter and Route Emitter logs and contact Pivotal Support.</li>
                    </ol>
                    </td>
        </tr>
</table>

###<a id="invalid-backend-id"></a>Number of Rejected Requests: Invalid TLS Cert ID

<table>
     <tr><th colspan="2" style="text-align: center;"><br>gorouter.backend_invalid_id<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>
                  The lifetime number of router requests that were rejected when connecting to a backend because the backend presented a certificate with an invalid ID.
                  Emitted per Router instance.
                  <strong>Use</strong>: Indicates that the gorouter could not validate the identify of the app instance using TLS.
                  Increases in the reported number of invalid TLS cert IDs will also correspond with an increase in HTTP 503 error responses.
                  <br><br>
                  If this metric is increasing, it can indicate that routes are getting stale, and that there is likely a failure occurring in the Routing Control Plane.
                  Over time this could lead in routes being pruned and downstream clients receiving HTTP 502 errors.
                  <br><br>
                  <strong>Origin</strong>: Firehose<br>
                  <strong>Type</strong>: Counter<br>
                  <strong>Frequency</strong>: 5 s<br>
		</td>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>Delta of the number of backends marked as invalid per Gorouter every Xs.
                Since routes are pruned every 120 s this should be monitored at a higher frequency than 120s.</td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: Dynamic<br>
                <strong>Red critical</strong>: Dynamic</td>
        </tr>
        <tr>
                <th>Recommended response</th>
                <td>
                    To help confirm the potential issue is the Routing Control Plan, look at <code>gorouter.total_routes</code>,
                    which would also show a decline in the current number of routes registered. Potential issues to look for here could be
                    <br>
                    <br>
                    <ol>
                        <li>Network latency issues</li>
                        <li>Network partitions</li>
                        <li>NATS cluster issues</li>
                    </ol>
                    </td>
        </tr>
</table>

##<a id="uaa"></a>UAA Metrics

###<a id="uaa_throughput"></a>UAA Throughput
<table>
  <tr><th colspan="2" style="text-align: center;"><br>uaa.requests.global.completed.count<br><br></th></tr>
  <tr>
    <th width="25%">Description</th>
      <td>The lifetime number of requests completed by the UAA VM, emitted per UAA instance. This number includes health checks.
        <br><br>
        <strong>Use</strong>: For capacity planning purposes, the aggregation of these values across all UAA instances can provide insight into the overall load that UAA is processing.
        It is recommended to alert on unexpected spikes per UAA instance. Unusually high spikes, if they are not associated with an expected increase in demand, could indicate a DDoS risk and should be investigated.
        <br><br>
        For performance and capacity management, look at the UAA Throughput metric as either a requests-completed-per-second or requests-completed-per-minute rate to determine the throughput per UAA instance.
        This helps you see trends in the throughput rate that may indicate a need to scale UAA instances. Use the trends you observe to tune the threshold alerts for this metric.
        <br><br>
        From performance and load testing of UAA, Pivotal has observed that while UAA endpoints can have different throughput behavior, once throughput reaches its peak value per VM, it stays constant and latency increases.
        <br><br>
        <strong>Origin</strong>: Firehose<br>
        <strong>Type</strong>: Gauge (Integer), emitted value increments over the lifetime of the VM like a counter<br>
        <strong>Frequency</strong>: 5 s<br>
      </td>
    </tr>
    <tr>
      <th>Recommended measurement</th>
      <td>Average over the last 5 minutes of the derived requests-per-second or requests-per-minute rate, per instance</td>
    </tr>
    <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: Dynamic<br>
          <strong>Red critical</strong>: Dynamic</td>
    </tr>
    <tr>
      <th>Recommended response</th>
      <td>For optimizing UAA, consider this metric in the context of <a href="#uaa_latency">UAA Request Latency</a> and <a href="key-cap-scaling.html#uaa-system.cpu.user">UAA VM CPU Utilization</a>.
      To increase throughput and maintain low latency, scale the UAA VMs horizontally by editing the number of your <b>UAA</b> VM instances in the <b>Resource Config</b> pane of the PAS tile
      and ensure that the <code>system.cpu.user</code> metric for UAA is not sustained in the suggested range of 80-90% maximum CPU utilization.
      </td>
    </tr>
</table>

###<a id="uaa_latency"></a>UAA Request Latency
<table>
  <tr><th colspan="2" style="text-align: center;"><br>gorouter.latency.uaa<br><br></th></tr>
  <tr>
    <th width="25%">Description</th>
      <td>Time in milliseconds that UAA took to process a request that the Gorouter sent to UAA endpoints.
        <br><br>
        <strong>Use</strong>: Indicates how responsive UAA has been to requests sent from the Gorouter. Some operations may take longer to process, such as creating bulk users and groups. It is important to correlate latency observed with the endpoint and evaluate this data in the context of overall historical latency from that endpoint. Unusual spikes in latency could indicate the need to scale UAA VMs.
        <br><br>
        This metric is emitted only for the routers serving the UAA system component and is not emitted per isolation segment even if you are using isolated routers.
        <br><br>
	**Known Issue**: This metric is not currently being emitted in PCF v2.1.
	<br><br>
        <strong>Origin</strong>: Firehose<br>
        <strong>Type</strong>: Gauge (Float in ms)<br>
        <strong>Frequency</strong>: Emitted per Gorouter request to UAA<br>
      </td>
    </tr>
    <tr>
      <th>Recommended measurement</th>
      <td>Maximum, per job, over the last 5 minutes</td>
    </tr>
    <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: Dynamic<br>
          <strong>Red critical</strong>: Dynamic</td>
    </tr>
    <tr>
      <th>Recommended response</th>
      <td>Latency depends on the endpoint and operation being used. It is important to correlate the latency with the endpoint and evaluate this data in the context of the historical latency from that endpoint.
	      <ol>
            <li>Inspect which endpoints requests are hitting. Use historical data to determine if the latency is unusual for that endpoint. A list of UAA endpoints is available in the <a href="http://docs.cloudfoundry.org/api/uaa/version/4.8.0/index.html">UAA API documentation</a>.</li>
            <li>If it appears that UAA needs to be scaled due to ongoing traffic congestion, do not scale based on the latency metric alone. You should also ensure that the <code>system.cpu.user</code> metric for UAA stays in the suggested range of 80-90% maximum CPU utilization.</li>
            <li>Resolve high utilization by scaling UAA VMs horizontally. To scale UAA, navigate to the <b>Resource Config</b> pane of the PAS tile and edit the number of your <b>UAA</b> VM instances.</li>
        </ol>
      </td>
    </tr>
</table>

###<a id="uaa_requests_inflight"></a>UAA Requests In Flight
<table>
  <tr><th colspan="2" style="text-align: center;"><br>uaa.server.inflight.count<br><br></th></tr>
  <tr>
    <th width="25%">Description</th>
      <td>The number of requests UAA is currently processing (in-flight requests), emitted per UAA instance.
        <br><br>
        <strong>Use</strong>: Indicates how many concurrent requests are currently in flight for the UAA instance. Unusually high spikes, if they are not associated with an expected increase in demand, could indicate a DDoS risk. 
        <br><br>
        From performance and load testing of the UAA component, Pivotal has observed that the number of concurrent requests impacts throughput and latency. The UAA Requests In Flight metric helps you see trends in the request rate that may indicate the need to scale UAA instances. Use the trends you observe to tune the threshold alerts for this metric.
        <br><br>
        <strong>Origin</strong>: Firehose<br>
        <strong>Type</strong>: Gauge (Integer)<br>
        <strong>Frequency</strong>: 5 s<br>
      </td>
    </tr>
    <tr>
      <th>Recommended measurement</th>
      <td>Maximum, per job, over the last 5 minutes</td>
    </tr>
    <tr>
      <th>Recommended alert thresholds</th>
      <td><strong>Yellow warning</strong>: Dynamic<br>
          <strong>Red critical</strong>: Dynamic</td>
    </tr>
    <tr>
      <th>Recommended response</th>
      <td>To increase throughput and maintain low latency when the number of in-flight requests is high, scale UAA VMs horizontally by editing the <b>UAA</b> VM field in the <b>Resource Config</b> pane of the PAS tile. Ensure that the <code>system.cpu.user</code> metric for UAA is not sustained in the suggested range of 80-90% maximum CPU utilization.
      </td>
    </tr>
</table>

## <a id="bosh"></a> System (BOSH) Metrics

###<a id="healthy"></a>VM Health
<table>
     <tr><th colspan="2" style="text-align: center;"><br>system.healthy<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td><code>1</code> means the system is healthy, and <code>0</code> means the system is not healthy.
                <br><br>
                <strong>Use</strong>: This is the most important BOSH metric to monitor. 
                 It indicates if the VM emitting the metric is healthy.
                 Review this metric for all VMs to estimate the overall health of the system.
			<br><br>
			Multiple unhealthy VMs signals problems with the underlying IAAS layer.
                 <br><br>
                 <strong>Origin</strong>: Firehose<br>
                 <strong>Type</strong>: Gauge (Float, 0-1)<br>
                 <strong>Frequency</strong>: 60 s<br>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>Average over the last 5 minutes</td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: <em>N/A</em> <br>
                <strong>Red critical</strong>: &lt; 1</td>
        </tr>
        <tr>
                <th>Recommended response</th>
                <td>
                        Investigate CF logs for the unhealthy component(s).
                    </td>
        </tr>
</table>


###<a id="mem.percent"></a>VM Memory Used
<table>
     <tr><th colspan="2" style="text-align: center;"><br>system.mem.percent<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>System Memory — Percentage of memory used on the VM 
                        <br><br>
                 <strong>Use</strong>: Set an alert and investigate if the free RAM is low over an extended period. 
                 <br><br>
                 <strong>Origin</strong>: Firehose<br>
                 <strong>Type</strong>: Gauge (%)<br>
                 <strong>Frequency</strong>: 60 s<br>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>Average over the last 10 minutes</td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: &ge; 80%<br>
                <strong>Red critical</strong>: &ge; 90%</td>
        </tr>
        <tr>
                <th>Recommended response</th>
                <td>
                    The response depends on the job the metric is associated with. If appropriate, scale affected jobs out and monitor for improvement.
                </td>
        </tr>
</table>

###<a id="disk.system.percent"></a>VM Disk Used
<table>
     <tr><th colspan="2" style="text-align: center;"><br>system.disk.system.percent<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>System disk — Percentage of the system disk used on the VM
                        <br><br>
                 <strong>Use</strong>: Set an alert to indicate when the system disk is almost full.
                 <br><br>
                 <strong>Origin</strong>: Firehose<br>
                 <strong>Type</strong>: Gauge (%)<br>
                 <strong>Frequency</strong>: 60 s<br>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>Average over the last 30 minutes</td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: &ge; 80%</br>
                <strong>Red critical</strong>: &ge; 90%</td>
        </tr>
        <tr>
                <th>Recommended response</th>
                <td>
                    Investigate what is filling the jobs system partition. <br>
                    This partition should not typically fill because BOSH deploys jobs to use ephemeral and persistent disks.
                    </td> 
        </tr>
</table>


###<a id="disk.ephemeral.percent"></a>VM Ephemeral Disk Used
<table>
     <tr><th colspan="2" style="text-align: center;"><br>system.disk.ephemeral.percent<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>Ephemeral disk — Percentage of the ephemeral disk used on the VM
                <br><br>
               <strong>Use</strong>: Set an alert and investigate if the ephemeral 
                disk usage is too high for a job over an extended period.
                <br><br>
                <strong>Origin</strong>: Firehose<br>
                <strong>Type</strong>: Gauge (%)<br>
                <strong>Frequency</strong>: 60 s<br>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>Average over the last 30 minutes</td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: &ge; 80%</br>
                <strong>Red critical</strong>: &ge; 90%</td>
        </tr>
        <tr>
                <th>Recommended response</th>
                <td>
                    <ol>
                        <li>Run <code>bosh vms --details</code> to view jobs on affected deployments.</li>
                        <li>Determine cause of the data consumption, and, if appropriate, 
                            increase disk space or scale out the affected jobs.</li>
                    </ol>
                    </td>
        </tr>
</table>


###<a id="disk.persistent.percent"></a>VM Persistent Disk Used
<table>
     <tr><th colspan="2" style="text-align: center;"><br>system.disk.persistent.percent<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>Persistent disk — Percentage of persistent disk used on the VM
                        <br><br>
                <strong>Use</strong>: Set an alert and investigate further if the persistent disk usage for a job is too high 
                over an extended period.
                        <br><br>
                 <strong>Origin</strong>: Firehose<br>
                 <strong>Type</strong>: Gauge (%)<br>
                 <strong>Frequency</strong>: 60 s<br>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>Average over the last 30 minutes</td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: &ge; 80%<br>
                <strong>Red critical</strong>: &ge; 90%</td>
        </tr>
        <tr>
                <th>Recommended response</th>
                <td>
                    <ol>
                        <li>Run <code>bosh vms --details</code> to view jobs on affected deployments.</li>
                        <li>Determine cause of the data consumption, and, if appropriate, 
                            increase disk space or scale out affected jobs.</li>
                    </ol>
                    </td>
        </tr>
</table>

###<a id="cpu.user"></a>VM CPU Utilization
<table>
     <tr><th colspan="2" style="text-align: center;"><br>system.cpu.user<br><br></th></tr>
        <tr>
                <th width="25%">Description</th>
                <td>CPU utilization — The percentage of CPU spent in user processes
                <br><br>
                <strong>Use</strong>: Set an alert and investigate further if the CPU utilization is
                too high for a job.<br><br>
                For monitoring Gorouter performance, CPU utilization of the Gorouter VM is 
                the recommended key capacity scaling indicator.
                For more information, see <a href="./key-cap-scaling.html#system.cpu.user">Gorouter Latency and Throughput</a>.
                <br><br>
                <strong>Origin</strong>: Firehose<br>
                <strong>Type</strong>: Gauge (%)<br>
                <strong>Frequency</strong>: 60 s<br>
        </tr>
        <tr>
                <th>Recommended measurement</th>
                <td>Average over the last 5 minutes</td>
        </tr>
        <tr>
                <th>Recommended alert thresholds</th>
                <td><strong>Yellow warning</strong>: &ge; 85%<br>
                <strong>Red critical</strong>: &ge; 95%</td>
        </tr>
        <tr>
                <th>Recommended response</th>
                <td>
                    <ol>
                        <li>Investigate the cause of the spike.</li>
                        <li>If the cause is a normal workload increase, then scale up the affected jobs.</li>
                    </ol>
                    </td>
        </tr>
</table>



